<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="API_WELCOME" xml:space="preserve">
    <value>The API is up and running</value>
  </data>
  <data name="ERROR_ACCOUNT_ATTEMPT_COUNTER" xml:space="preserve">
    <value>You have incorrectly attempted {0} of {1} times, until your account will be blocked.</value>
  </data>
  <data name="ERROR_ACCOUNT_PASSWORD_NOT_MATCH" xml:space="preserve">
    <value>The password is incorrect.</value>
  </data>
  <data name="ERROR_ACCOUNT_USER_LOCKED" xml:space="preserve">
    <value>The account is blocked, contact your administrator.</value>
  </data>
  <data name="ERROR_ACCOUNT_USER_NOT_EXISTS" xml:space="preserve">
    <value>The user does not exists.</value>
  </data>
  <data name="ERROR_CUSTOMER_ADD" xml:space="preserve">
    <value>The customer wasn't added. Try again.</value>
  </data>
  <data name="ERROR_CUSTOMER_GET" xml:space="preserve">
    <value>Couldn't get the customer information.</value>
  </data>
  <data name="ERROR_CUSTOMER_UPDATE" xml:space="preserve">
    <value>The customer wasn't updated. Try again.</value>
  </data>
  <data name="ERROR_EXCEPTION_TITLE" xml:space="preserve">
    <value>Uops! Something went wrong.</value>
  </data>
  <data name="ERROR_ORDER_ADD" xml:space="preserve">
    <value>Couldn't add the ordeer. Try again.</value>
  </data>
  <data name="ERROR_ORDER_CANCEL" xml:space="preserve">
    <value>Couldn't cancel the order. Try again.</value>
  </data>
  <data name="ERROR_ORDER_GET" xml:space="preserve">
    <value>Couldn't get the order information.</value>
  </data>
  <data name="ERROR_ORDER_MOVED" xml:space="preserve">
    <value>Couldn't move the order to the next process.</value>
  </data>
  <data name="ERROR_ORDER_REJECT" xml:space="preserve">
    <value>Couldn't reject the order. Try again.</value>
  </data>
  <data name="ERROR_ORDER_SEARCH" xml:space="preserve">
    <value>Couldn't perform the search requested.</value>
  </data>
  <data name="ERROR_ORDER_UPDATE" xml:space="preserve">
    <value>Couldn't modify the order. Try again.</value>
  </data>
  <data name="ERROR_PRODUCT_ADD" xml:space="preserve">
    <value>The product wasn't added. Try again.</value>
  </data>
  <data name="ERROR_PRODUCT_GET" xml:space="preserve">
    <value>Couldn't get the product information.</value>
  </data>
  <data name="ERROR_PRODUCT_UPDATE" xml:space="preserve">
    <value>The product wasn't updated. Try again.</value>
  </data>
  <data name="ERROR_VALIDATION_LOGIN_PASSWORD" xml:space="preserve">
    <value>The password is required.</value>
  </data>
  <data name="ERROR_VALIDATION_LOGIN_USERNAME" xml:space="preserve">
    <value>The username is required.</value>
  </data>
  <data name="PUSH_ORDER_MESSAGE_CANCEL" xml:space="preserve">
    <value>{0} has canceled the order with number {1} because {2}</value>
  </data>
  <data name="PUSH_ORDER_MESSAGE_DELIVER" xml:space="preserve">
    <value>{0} has delivered the order with number {1} and charged {2}.</value>
  </data>
  <data name="PUSH_ORDER_MESSAGE_MOVED" xml:space="preserve">
    <value>{0} has moved the order number {1} to process {2}.</value>
  </data>
  <data name="PUSH_ORDER_MESSAGE_NEW" xml:space="preserve">
    <value>{0} has created a new order with number {1}.</value>
  </data>
  <data name="PUSH_ORDER_MESSAGE_REJECT" xml:space="preserve">
    <value>{0} has rejected the order with number {1} because {2}</value>
  </data>
  <data name="PUSH_ORDER_MESSAGE_UPDATE" xml:space="preserve">
    <value>{0} has modified the order with number {1}.</value>
  </data>
  <data name="PUSH_ORDER_TITLE_CANCEL" xml:space="preserve">
    <value>Order canceled!</value>
  </data>
  <data name="PUSH_ORDER_TITLE_DELIVER" xml:space="preserve">
    <value>Order delivered!</value>
  </data>
  <data name="PUSH_ORDER_TITLE_MOVED" xml:space="preserve">
    <value>Order moved!</value>
  </data>
  <data name="PUSH_ORDER_TITLE_NEW" xml:space="preserve">
    <value>New order!</value>
  </data>
  <data name="PUSH_ORDER_TITLE_REJECT" xml:space="preserve">
    <value>Order rejected!</value>
  </data>
  <data name="PUSH_ORDER_TITLE_UPDATE" xml:space="preserve">
    <value>Order updated!</value>
  </data>
  <data name="SELECT_ITEM_EMPTY" xml:space="preserve">
    <value>----- Select -----</value>
  </data>
  <data name="STATUS_NAME_DELIVER" xml:space="preserve">
    <value>"Ready to deliver"</value>
  </data>
  <data name="STATUS_NAME_PROCESSING" xml:space="preserve">
    <value>"Processing"</value>
  </data>
  <data name="SUCCESS_CUSTOMER_ADD" xml:space="preserve">
    <value>The customer was added successfully.</value>
  </data>
  <data name="SUCCESS_CUSTOMER_UPDATE" xml:space="preserve">
    <value>The customer was updated successfully.</value>
  </data>
  <data name="SUCCESS_ORDER_ADD" xml:space="preserve">
    <value>The order with number {0} was added successfully.</value>
  </data>
  <data name="SUCCESS_ORDER_CANCEL" xml:space="preserve">
    <value>The order with number {0} was canceled successfully.</value>
  </data>
  <data name="SUCCESS_ORDER_MOVED" xml:space="preserve">
    <value>The order with number {0} was moved to next process successfully.</value>
  </data>
  <data name="SUCCESS_ORDER_REJECT" xml:space="preserve">
    <value>The order with number {0} was rejected successfully.</value>
  </data>
  <data name="SUCCESS_ORDER_UPDATE" xml:space="preserve">
    <value>The order with number {0} was updated successfully.</value>
  </data>
  <data name="SUCCESS_PRODUCT_ADD" xml:space="preserve">
    <value>The product was added successfully.</value>
  </data>
  <data name="SUCCESS_PRODUCT_UPDATE" xml:space="preserve">
    <value>The product was updated successfully.</value>
  </data>
</root>